# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
name: Mirror Docker Images

env:
  # List of Docker Hub images to mirror, one per line
  SOURCE_IMAGES: |
    alpine:3
    alpine:latest
    busybox:latest
    busybox:stable
    busybox:stable-musl
    bitnami/minideb:latest
    debian:stable
    debian:stable-slim
    multiarch/qemu-user-static:latest
    node:lts
    node:lts-slim
    registry:latest
    tonistiigi/binfmt:latest

on:
  schedule:
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
    - cron: '30 1 * * *'  # Runs daily at 01:30 UTC
  push:
    branches-ignore:  # build all branches except:
    - 'dependabot/**'  # prevent GHA triggered twice (once for commit to the branch and once for opening/syncing the PR)
    tags-ignore:  # don't build tags
    - '**'
    paths-ignore:
    - '**/*.md'
    - '.git*'
    - '.github/*.yml'
    - '.github/workflows/keepalive.yml'
  pull_request:
    paths-ignore:
    - '**/*.md'
    - '.git*'
    - '.github/*.yml'
    - '.github/workflows/keepalive.yml'
  workflow_dispatch:
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_dispatch

defaults:
  run:
    shell: bash

jobs:

  ###########################################################
  mirror-docker-images:
  ###########################################################
    runs-on: ubuntu-latest  # https://github.com/actions/runner-images#available-images
    timeout-minutes: 30

    permissions:
      packages: write

    # https://docs.github.com/en/actions/using-jobs/using-concurrency
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false


    steps:
    - name: "Show: GitHub context"
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo $GITHUB_CONTEXT


    - name: "Show: environment variables"
      run: env | sort


    - name: Install regclient
      uses: iarekylew00t/regctl-installer@v3


    - name: Login to docker.io
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}


    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Check Docker Hub rate-limit
      run: |
        set -euo pipefail

        echo "üîç  Querying Docker Hub rate-limit‚Ä¶"

        token=$(curl -s -u "${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_TOKEN }}" \
          "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/alpine:pull" |
          jq -r '.token')

        headers=$(curl -sI -H "Authorization: Bearer $token" \
          -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
          https://registry-1.docker.io/v2/library/alpine/manifests/latest)

        remain=$(echo "$headers" | awk -F'[ ;]' '/ratelimit-remaining/ {print $2}')
        limit=$(echo  "$headers" | awk -F'[ ;]' '/ratelimit-limit/      {print $2}')

        echo "üõà  Docker Hub pulls remaining in the current 6-hour window: $remain / $limit"


    - name: Mirror images
      id: mirror_images
      run: |
        set -eu
        repos=()
        while IFS= read -r image; do
          image=$(echo "$image" | xargs)  # trim spaces
          [[ -n "$image" ]] || continue  # skip if the line is empty
          echo "üîÑ Mirroring [$image]..."
          name="${image%%:*}"
          tag="${image#*:}"
          repo="${name//\//__}"  # replace org/repo separator / with __
          regctl image copy "docker.io/$image" "ghcr.io/${{ github.repository_owner }}/$repo:$tag"
          repos+=("$repo")
        done <<< "$SOURCE_IMAGES"
        
        IFS=','; repos_joined="${repos[*]}"
        echo "package_names=${repos_joined}" >> "$GITHUB_OUTPUT"


    - name: Delete untagged images
      uses: dataaxiom/ghcr-cleanup-action@v1
      continue-on-error: true
      with:
        packages: ${{ steps.mirror_images.outputs.package_names }}
        delete-untagged: true
        delete-partial-images: true
        delete-ghost-images: true
        delete-orphaned-images: true
        validate: true
